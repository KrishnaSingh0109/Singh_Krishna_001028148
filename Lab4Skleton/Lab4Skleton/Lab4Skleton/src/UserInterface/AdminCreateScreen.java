/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Users.Admin;
import Business.Users.Customer;
import Business.Users.Supplier;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author AEDSpring2019
 */
public class AdminCreateScreen extends javax.swing.JPanel {

    /**
     * Creates new form AdminScreen
     */
    private JPanel panelRight;
    private Admin admin;
    public static String option="";
    public AdminCreateScreen(JPanel panelRight, Admin admin) {
        initComponents();
        this.panelRight = panelRight;
        this.admin = admin;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreate = new javax.swing.JButton();
        txtUser = new javax.swing.JTextField();
        txtPword = new javax.swing.JTextField();
        txtRePword = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        radioCustomer = new javax.swing.JRadioButton();
        radioSupplier = new javax.swing.JRadioButton();
        btnBack = new javax.swing.JButton();

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        txtUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                userNameFocusLostActioned(evt);
            }
        });
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        txtPword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFocusLostActioned(evt);
            }
        });

        txtRePword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                matchPasswordActioned(evt);
            }
        });

        jLabel1.setText("username:");

        jLabel2.setText("password:");

        jLabel3.setText("re-enter password :");

        radioCustomer.setText("Customer");
        radioCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCustomerActionPerformed(evt);
            }
        });

        radioSupplier.setText("Supplier");
        radioSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSupplierActionPerformed(evt);
            }
        });

        btnBack.setText("< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioSupplier)
                                    .addComponent(radioCustomer)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRePword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioCustomer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioSupplier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreate)
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        checkUserNameFormat(txtUser.getText());
        checkPasswordFormat(txtPword.getText());
        checkPasswordMatch(txtPword.getText(),txtRePword.getText());
        String role="";
        String userName="";
        String password="";
        Date date = new Date();
        System.out.println("Date :: " +date);
        userName = txtUser.getText();
        password = txtPword.getText();
        
        try{
            if(radioCustomer.isSelected()==false && radioSupplier.isSelected()==false){
                throw new RuntimeException("Please Select The Option!!!");
            }
        }catch(RuntimeException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
            return;
        }
        if(radioCustomer.isSelected()){
//            role="CUSTOMER";
//            user.setRole(role);
//            user.setPassword(password);
//            user.setUserName(userName);
//            user.setDate(date);
//            System.out.println("Name :: "+user.getUserName());
//            
//            customerList.add(user);
//            System.out.println("Customer List Size:: " +customerList.size() );
//            System.out.println("User1 Details :: "+customerList);
//            CustomerDirectory cDir= new CustomerDirectory();
//            cDir.setCustomerList(customerList);
//            //System.out.println("Customer Directory Size:: " +cDir.getCustomerList().size() );
//            
//            admin.setCustDir(cDir);
            //System.out.println("Admin Customer List Size:: " +admin.getCustDir().getCustomerList().size());
              admin.getCustDir().getCustomerList().add(new Customer(password, userName,date));
            
        }else if(radioSupplier.isSelected()){
            role="SUPPLIER";
//            user.setRole(role);
//            user.setPassword(password);
//            user.setUserName(userName);
//            user.setDate(date);
//            //System.out.println("User Details :: "+user);
//            List<User> supplierList ;
//            supplierList = new ArrayList<>();
//            supplierList.add(user);
//            SupplierDirectory sDir= new SupplierDirectory();
//            //System.out.println("Supplier List :: "+sDir.getSupplierList());
//            sDir.setSupplierList(supplierList);
//            admin.setSuppDir(sDir);
//            //System.out.println("Supplier Directory ::" +admin.getSuppDir());
              admin.getSuppDir().getSupplierList().add(new Supplier(password, userName));
        }
        JOptionPane.showMessageDialog(null, "Added Sucessfully");
        txtUser.setText("");
        txtPword.setText("");
        txtRePword.setText("");
        radioCustomer.setSelected(false);
        radioSupplier.setSelected(false);
        //admin.suppDir.setSupplierList(supplierList);
        
       
    }//GEN-LAST:event_btnCreateActionPerformed

    private boolean usernamePatternCorrect(){
         Pattern p = Pattern.compile("^[a-zA-Z0-9]+_[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+$");
         Matcher m = p.matcher(txtUser.getText());
         boolean b = m.matches();
         return b;
     }
     private boolean passwordPatternCorrect(){
         Pattern p = Pattern.compile("^(?=.*[A-Z])(?=.*\\d)(?=.*[$*#&])[A-Za-z\\d$*#&]{6,}$");
         Matcher m =p.matcher(txtPword.getText());
         boolean b = m.matches();
         return b;
     }
     
     private void toMainScreen(){
         
        CardLayout layout = (CardLayout)this.panelRight.getLayout();
        this.panelRight.remove(this);
        Component[] comps=this.panelRight.getComponents();
        for(Component comp : comps)
        {
            if(comp instanceof AdminMainScreen)
            {
                AdminMainScreen panel=(AdminMainScreen)comp;
                panel.populateS();
                panel.populateC();
            }
        }
         
     }
     
    private void radioCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCustomerActionPerformed
        // TODO add your handling code here:
        if(radioCustomer.isSelected()){
            radioSupplier.setSelected(false);
        }
    }//GEN-LAST:event_radioCustomerActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        CardLayout layout = (CardLayout)panelRight.getLayout();
        panelRight.remove(this);
        layout.previous(panelRight);
        toMainScreen();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void radioSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSupplierActionPerformed
        // TODO add your handling code here:
        if(radioSupplier.isSelected()){
            radioCustomer.setSelected(false);
        }
    }//GEN-LAST:event_radioSupplierActionPerformed

    private void matchPasswordActioned(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matchPasswordActioned
        // TODO add your handling code here:
        checkPasswordMatch(txtPword.getText(),txtRePword.getText());
    }//GEN-LAST:event_matchPasswordActioned

    private void passwordFocusLostActioned(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusLostActioned
        // TODO add your handling code here:
        checkPasswordFormat(txtPword.getText());
    }//GEN-LAST:event_passwordFocusLostActioned

    private void userNameFocusLostActioned(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameFocusLostActioned
        // TODO add your handling code here:
        checkUserNameFormat(txtUser.getText());
    }//GEN-LAST:event_userNameFocusLostActioned

    public void checkUserNameFormat(String userName){
        Pattern pattern = Pattern.compile("^[a-zA-Z0-9]+_[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-z]+$");
        Matcher matcher =pattern.matcher(userName);
        boolean b = matcher.matches();
        if(b==false){
            txtUser.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Not a valid username. Ex smit_jones@gmail.com");
        }else{
            txtUser.setBorder(BorderFactory.createLineBorder(Color.BLUE));
        }
    }
    
    public void checkPasswordFormat(String pswd){
        Pattern pattern = Pattern.compile("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$");
        Matcher matcher =pattern.matcher(pswd);
        boolean b = matcher.matches();
        if(b==false){
            txtPword.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Not a valid password. Must consist of 6 letters and contain one Uppercase letter, one Lowercase letter, one Number and one Special Character");
            return;
        }else{
            txtPword.setBorder(BorderFactory.createLineBorder(Color.BLUE));
        }
    }
    
    public void checkPasswordMatch(String pswd, String rePswd){
        if(!pswd.equals(rePswd)){
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Password does not match!!!");
        }else{
            txtRePword.setBorder(BorderFactory.createLineBorder(Color.BLUE));
        }
    } 
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton radioCustomer;
    private javax.swing.JRadioButton radioSupplier;
    private javax.swing.JTextField txtPword;
    private javax.swing.JTextField txtRePword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
